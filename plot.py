
from matplotlib import pyplot as plt
import numpy


case = "sf"

plt.rcParams.update({'font.size': 14})
plt.figure()

axes = plt.gca()
axes.set_ylim([0.3, 1])

#### replay
if case == "rp":
    replay = [1, 2, 3, 4, 5]

    auc = [0.6908595070982492, 0.7119082005797714, 0.6993018208197674, 0.7007270254570197, 0.6921307082941581]
    auc_std = [0.011212544291886695, 0.003071695873243574, 0.010291918676534997, 0.005458111794808756, 0.008601184320154096]
    acc = [0.7699343996462004, 0.7761774894965725, 0.7698533205572344, 0.774578020196064, 0.772042455959313]
    acc_std = [0.0037886054195935387, 0.0021905669093761656, 0.002567465219568459, 0.0029717513402577494, 0.002911020095932198]
    prule = [0.8461566298386076, 0.9014413940443934, 0.8424731544324888, 0.8711708701811658, 0.8882036558776776]
    prule_std = [0.03433705376434056, 0.017418586857638516, 0.02553181606160966, 0.021560871330755446, 0.03626342676458518]

    plt.plot(replay, auc, '-b', label='AUC')
    #plt.plot(replay, acc, '-r', label='Accuracy')
    plt.plot(replay, prule, '-g', label='Fairness')

    # Plot std
    auc_std_l = [auc[i] - auc_std[i] for i in range(len(auc))]
    auc_std_u = [auc[i] + auc_std[i] for i in range(len(auc))]

    acc_std_l = [acc[i] - acc_std[i] for i in range(len(acc))]
    acc_std_u = [acc[i] + acc_std[i] for i in range(len(acc))]

    p_std_l = [prule[i] - prule_std[i] for i in range(len(prule))]
    p_std_u = [prule[i] + prule_std[i] for i in range(len(prule))]

    plt.fill_between(replay, auc_std_l, auc_std_u, color='lightblue')  # works!
    #plt.fill_between(replay, acc_std_l, acc_std_u, color='lightcoral')  # works!
    plt.fill_between(replay, p_std_l, p_std_u, color='lightgreen')  # works!

    plt.legend(loc='lower left')

    plt.xticks(replay)
    plt.xlabel('Replay Count')
    plt.ylabel('Performance')

    plt.savefig("replay")

#### control number
elif case == "cn":
    k = numpy.arange(0.2, 2.1, 0.2)

    # auc = [0.7601216667182917, 0.7407323711816561, 0.7238600397225847, 0.7331223439771819, 0.7280419343310405, 0.6953612482151502, 0.7198352706904572, 0.7182492537459427, 0.717535644300743, 0.6826282090321836, 0.6697142554961493, 0.6694025341662904, 0.6671909697727806, 0.6513823356418669, 0.645925628682799, 0.6326961241484482, 0.6260917306177145, 0.611662117740573, 0.6073858103782239, 0.5916308556518628]
    # auc_std = [0.002145378965149541, 0.005457732041483717, 0.007792123004391143, 0.0033270723029587045, 0.007691189092866833, 0.01216805841530916, 0.006780400477030763, 0.006185911313281476, 0.010438112722072542, 0.01100596828011155, 0.012920044512075731, 0.012945635516783387, 0.012118055563335116, 0.01123708007867169, 0.008713255363514338, 0.008692161105885441, 0.0046886360724628755, 0.005619088113089913, 0.005826628554306314, 0.004967913655105965]
    # acc = [0.7688656298371048, 0.7678189725068181, 0.7698090955996167, 0.7666027861723299, 0.7782044667207193, 0.7662784698164664, 0.7695732291589887, 0.7706419989680844, 0.774636986806221, 0.7541755730817424, 0.7703692783961082, 0.7728606176752415, 0.7648264170413503, 0.7567701039286503, 0.7496572565784624, 0.7597405469153093, 0.7255178005454412, 0.7654897914056167, 0.77563941917889, 0.7597405469153092]
    # acc_std = [0.0057035794685977, 0.005030339178705821, 0.0032925407518579947, 0.005693964485975387, 0.004328180943224724, 0.004275389943543733, 0.004138347110620016, 0.003948438874034757, 0.005047366704696361, 0.008549023862111997, 0.002489576635582946, 0.0030603791388052067, 0.003779591247707467, 0.00853875436272137, 0.00953387928498439, 0.009753651505583816, 0.015635718494554803, 0.009562641958078995, 0.0006223395999594302, 0.013638837988690233]
    # prule = [0.48455429264339067, 0.5578617996039128, 0.6268825461616224, 0.6482965193009914, 0.6838487526513117, 0.7799562939319344, 0.7654440717803439, 0.8303845797672921, 0.7893919185094717, 0.8611541379942279, 0.7648588971921031, 0.7522932242469824, 0.757232016927876, 0.6864117222638894, 0.707719179415034, 0.651877403743406, 0.5748549559010095, 0.5772741377594643, 0.5805361023430372, 0.5932909013979449]
    # prule_std = [0.014587400197425245, 0.02357247625187881, 0.029857085824294947, 0.01699333637812285, 0.02678267877232914, 0.02399902314919126, 0.03810561953973415, 0.036705811737678666, 0.03053182363746505, 0.021768241310465637, 0.04970385839132018, 0.04534832622291006, 0.05017443653993872, 0.04246218537266296, 0.04889449077383844, 0.032095471635826774, 0.01507464637369865, 0.0032850030978068836, 0.0015379814583656593, 0.012750735778957361]
    #
    # k = k[1::2]
    # auc = auc[1::2]
    # auc_std = auc_std[1::2]
    # acc = acc[1::2]
    # acc_std = acc_std[1::2]
    # prule = prule[1::2]
    # prule_std = prule_std[1::2]

    auc = [0.7362020808124595, 0.6685905198024308, 0.6977083122644636, 0.6913071510598269, 0.6940282482875989,
           0.6788147133180824, 0.636149099208047, 0.6002732749924095, 0.5792719947805225, 0.5714431769166876]
    auc_std = [0.004721175467934907, 0.007014551283525497, 0.008558473530664483, 0.011033693889288739,
               0.012681424101233777, 0.01207337560455352, 0.007903023421691007, 0.005339857659969559,
               0.00010370332693685772, 0.007530772077836604]
    acc = [0.7684454927397362, 0.770413503353726, 0.7731407090734871, 0.7740989164885383, 0.7727205719761185,
           0.7671555981425519, 0.7340605881919364, 0.7584801356232035, 0.768917225620992, 0.7677600058966609]
    acc_std = [0.005837650199031066, 0.002313613017403522, 0.0038139706467758615, 0.0025113174190313685,
               0.0028169336623312395, 0.0040631374781637105, 0.01462501584330014, 0.008319119893873945,
               0.0006363247595090795, 0.0017341597841566076]
    prule = [0.573255262259219, 0.868244591205759, 0.8747176184320505, 0.8654318110587577, 0.8870709662169423,
             0.814195008647925, 0.6391368848695699, 0.566373087221802, 0.5764793797326206, 0.5107133313017183]
    prule_std = [0.029976277963449923, 0.0245879125000006, 0.029142022679021048, 0.035221924405100136,
                 0.04364056056299745, 0.04474247669155642, 0.016146447127724037, 0.01879812987625279,
                 0.008557239780991644, 0.05383391194418654]

    plt.plot(k, auc, '-b', label='AUC')
    plt.plot(k, acc, '-r', label='Accuracy')
    plt.plot(k, prule, '-g', label='Fairness')

    # Plot std
    auc_std_l = [auc[i] - auc_std[i] for i in range(len(auc))]
    auc_std_u = [auc[i] + auc_std[i] for i in range(len(auc))]

    acc_std_l = [acc[i] - acc_std[i] for i in range(len(acc))]
    acc_std_u = [acc[i] + acc_std[i] for i in range(len(acc))]

    p_std_l = [prule[i] - prule_std[i] for i in range(len(prule))]
    p_std_u = [prule[i] + prule_std[i] for i in range(len(prule))]

    plt.fill_between(k, auc_std_l, auc_std_u, color='lightblue')  # works!
    plt.fill_between(k, acc_std_l, acc_std_u, color='lightcoral')  # works!
    plt.fill_between(k, p_std_l, p_std_u, color='lightgreen')  # works!

    plt.legend(loc='lower left')

    plt.xticks(k)
    plt.xlabel(r'Num. of samples to penalize ($\times k)$')
    plt.ylabel('Performance')

    plt.savefig("k_number")


#### sample fraction
elif case == "sf":
    frac = numpy.arange(0.1, 1.1, 0.1)

    auc = [0.6951330596761176, 0.7125673764340564, 0.7095201876434085, 0.6964493541723177, 0.710893867183008, 0.7055138354471259, 0.7121594005390633, 0.7129149005569214, 0.7056014636864412, 0.7020235620547509]
    auc_std = [0.014508356951187362, 0.006539000931522002, 0.006421506686223137, 0.011621811778372175, 0.004375150496369622, 0.003922266122666847, 0.004403212979788361, 0.004758873025740375, 0.002781112034355121, 0.0048641271042268565]
    acc = [0.772926955111668, 0.7818382840716444, 0.7818751382029926, 0.7750571239035897, 0.776641851551559, 0.7683275595194221, 0.781314955406501, 0.7798850151101938, 0.7806220977371564, 0.7738556792216408]
    acc_std = [0.004675126906490048, 0.0025986694479221612, 0.003567054239114311, 0.0028349198223883085, 0.003066300050530172, 0.002909832871482184, 0.0039891283579449365, 0.0019466253100078985, 0.0016664605248617752, 0.0030820535173033017]
    prule = [0.7773431534162241, 0.8854682239660849, 0.9238958926164489, 0.8870380507844535, 0.9271689110361729, 0.9206573196252924, 0.8769992385927903, 0.8580896363507113, 0.887949431528608, 0.8938417407298092]
    prule_std = [0.023990232504375476, 0.022454566555909744, 0.017609059341824003, 0.03748563142043357, 0.014948436055682012, 0.019932509033313416, 0.018791122267242288, 0.017262378929896457, 0.026008185144354008, 0.025809705891512484]

    plt.plot(frac, auc, '-b', label='AUC')
    #plt.plot(frac, acc, '-r', label='Accuracy')
    plt.plot(frac, prule, '-g', label='Fairness')

    # Plot std
    auc_std_l = [auc[i] - auc_std[i] for i in range(len(auc))]
    auc_std_u = [auc[i] + auc_std[i] for i in range(len(auc))]

    acc_std_l = [acc[i] - acc_std[i] for i in range(len(acc))]
    acc_std_u = [acc[i] + acc_std[i] for i in range(len(acc))]

    p_std_l = [prule[i] - prule_std[i] for i in range(len(prule))]
    p_std_u = [prule[i] + prule_std[i] for i in range(len(prule))]

    plt.fill_between(frac, auc_std_l, auc_std_u, color='lightblue')  # works!
    #plt.fill_between(frac, acc_std_l, acc_std_u, color='lightcoral')
    plt.fill_between(frac, p_std_l, p_std_u, color='lightgreen')  # works!

    plt.legend(loc='lower left')

    plt.xticks(frac)
    plt.xlabel('Sub-sample fraction')
    plt.ylabel('Performance')

    plt.savefig("fraction")
    #plt.show()