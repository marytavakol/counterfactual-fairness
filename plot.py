
from matplotlib import pyplot as plt
import numpy


case = "cn"

plt.rcParams.update({'font.size': 14})
plt.figure()

axes = plt.gca()
axes.set_ylim([0.3, 1])

#### replay
if case == "rp":
    replay = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

    # auc =  [0.6737904993013052, 0.6701476017547001, 0.676446175631618, 0.6901975812197177, 0.6546398880273443, 0.6862370978656884, 0.6729662858146777, 0.697232305929484, 0.6784168777740963, 0.6872998054589685]
    # auc_std =  [0.015531087894857201, 0.014661968754472298, 0.014015621444697037, 0.012760656173736425, 0.015600811108760864, 0.0143275734103784, 0.015503600065377439, 0.013182113895133568, 0.014102680920931792, 0.013537946719120304]
    # prule =  [0.7903955861604771, 0.7975228137434661, 0.7899308332338637, 0.8605956859557523, 0.8124348046910427, 0.8154760354906404, 0.7961256308796036, 0.8607612537711316, 0.8149388791359126, 0.8297971946579217]
    # prule_std =  [0.04647873911141896, 0.051844898621588954, 0.043827389157313636, 0.043665190375053786, 0.04900302303736013, 0.03931782187488969, 0.05146058397702538, 0.046693222708503054, 0.04931840979128122, 0.038852757232902636]

#### control number
elif case == "cn":
    k = numpy.arange(0.1, 2.1, 0.1)
    # auc =  [0.6651244440858481, 0.7123287817082767, 0.7291770198211751, 0.7387349817638047, 0.7438476767658381, 0.750367209187423, 0.7483871146055189, 0.75882431073821, 0.7605271213414502, 0.7530244804374749]
    # auc_std =  [0.013493001526800176, 0.01006890595651665, 0.006107426568151668, 0.005273116264400824, 0.0036055110276126774, 0.005320148141327859, 0.004317391275714078, 0.0027597296438005765, 0.002547543826315695, 0.006304023288694256]
    # acc =  [0.7641777843296234, 0.777172551042972, 0.7733249797302277, 0.768054838947446, 0.7705461782265792, 0.7567332497973023, 0.7460086975749982, 0.7478514041424045, 0.7355716075772094, 0.77249207636176]
    # acc_std =  [0.007120097617408917, 0.0028370012528075865, 0.0027101807538726323, 0.0051871432491645145, 0.009703064997686634, 0.007224246058962807, 0.009082392127113332, 0.010848416308460597, 0.007753473370710619, 0.00739323048924056]
    # prule =  [0.782638249474495, 0.7657526797817259, 0.6446770271587198, 0.5924673987155653, 0.5701312125273976, 0.48094250359731017, 0.5034296734232991, 0.4684538038145214, 0.48473082594494643, 0.5100696172876671]
    # prule_std =  [0.044962469821225405, 0.022022067062896188, 0.022013944659096365, 0.03384727997950188, 0.03082335595508364, 0.02484993361766895, 0.032305738336259666, 0.021609300622161223, 0.022072064335668707, 0.015905105838325752]

    auc = [0.7601216667182917, 0.7407323711816561, 0.7238600397225847, 0.7331223439771819, 0.7280419343310405, 0.6953612482151502, 0.7198352706904572, 0.7182492537459427, 0.717535644300743, 0.6826282090321836, 0.6697142554961493, 0.6694025341662904, 0.6671909697727806, 0.6513823356418669, 0.645925628682799, 0.6326961241484482, 0.6260917306177145, 0.611662117740573, 0.6073858103782239, 0.5916308556518628]
    auc_std = [0.002145378965149541, 0.005457732041483717, 0.007792123004391143, 0.0033270723029587045, 0.007691189092866833, 0.01216805841530916, 0.006780400477030763, 0.006185911313281476, 0.010438112722072542, 0.01100596828011155, 0.012920044512075731, 0.012945635516783387, 0.012118055563335116, 0.01123708007867169, 0.008713255363514338, 0.008692161105885441, 0.0046886360724628755, 0.005619088113089913, 0.005826628554306314, 0.004967913655105965]
    acc = [0.7688656298371048, 0.7678189725068181, 0.7698090955996167, 0.7666027861723299, 0.7782044667207193, 0.7662784698164664, 0.7695732291589887, 0.7706419989680844, 0.774636986806221, 0.7541755730817424, 0.7703692783961082, 0.7728606176752415, 0.7648264170413503, 0.7567701039286503, 0.7496572565784624, 0.7597405469153093, 0.7255178005454412, 0.7654897914056167, 0.77563941917889, 0.7597405469153092]
    acc_std = [0.0057035794685977, 0.005030339178705821, 0.0032925407518579947, 0.005693964485975387, 0.004328180943224724, 0.004275389943543733, 0.004138347110620016, 0.003948438874034757, 0.005047366704696361, 0.008549023862111997, 0.002489576635582946, 0.0030603791388052067, 0.003779591247707467, 0.00853875436272137, 0.00953387928498439, 0.009753651505583816, 0.015635718494554803, 0.009562641958078995, 0.0006223395999594302, 0.013638837988690233]
    prule = [0.48455429264339067, 0.5578617996039128, 0.6268825461616224, 0.6482965193009914, 0.6838487526513117, 0.7799562939319344, 0.7654440717803439, 0.8303845797672921, 0.7893919185094717, 0.8611541379942279, 0.7648588971921031, 0.7522932242469824, 0.757232016927876, 0.6864117222638894, 0.707719179415034, 0.651877403743406, 0.5748549559010095, 0.5772741377594643, 0.5805361023430372, 0.5932909013979449]
    prule_std = [0.014587400197425245, 0.02357247625187881, 0.029857085824294947, 0.01699333637812285, 0.02678267877232914, 0.02399902314919126, 0.03810561953973415, 0.036705811737678666, 0.03053182363746505, 0.021768241310465637, 0.04970385839132018, 0.04534832622291006, 0.05017443653993872, 0.04246218537266296, 0.04889449077383844, 0.032095471635826774, 0.01507464637369865, 0.0032850030978068836, 0.0015379814583656593, 0.012750735778957361]

    k = k[1::2]
    auc = auc[1::2]
    auc_std = auc_std[1::2]
    acc = acc[1::2]
    acc_std = acc_std[1::2]
    prule = prule[1::2]
    prule_std = prule_std[1::2]

    plt.plot(k, auc, '-b', label='AUC')
    #plt.plot(k, acc, '-r', label='Accuracy')
    plt.plot(k, prule, '-g', label='Fairness')

    # Plot std
    auc_std_l = [auc[i] - auc_std[i] for i in range(len(auc))]
    auc_std_u = [auc[i] + auc_std[i] for i in range(len(auc))]

    acc_std_l = [acc[i] - acc_std[i] for i in range(len(acc))]
    acc_std_u = [acc[i] + acc_std[i] for i in range(len(acc))]

    p_std_l = [prule[i] - prule_std[i] for i in range(len(prule))]
    p_std_u = [prule[i] + prule_std[i] for i in range(len(prule))]

    plt.fill_between(k, auc_std_l, auc_std_u, color='lightblue')  # works!
    #plt.fill_between(k, acc_std_l, acc_std_u, color='lightcoral')  # works!
    plt.fill_between(k, p_std_l, p_std_u, color='lightgreen')  # works!

    plt.legend(loc='lower left')

    plt.xticks(k)
    plt.xlabel('Number of samples to penalize')
    #plt.xlabel('Replay Count')
    plt.ylabel('Performance')


    #plt.show()
    plt.savefig("k")

#### sample fraction
elif case == "sf":
